# Root and main locations
location = / {
    limit_req   zone=root_req_limit burst=40 nodelay;
    limit_req_status    429;
    include /etc/nginx/security_headers.conf;

    # Proxy to SSR server
    proxy_pass http://ssr_server;
    proxy_http_version 1.1;
    proxy_set_header    Upgrade             $http_upgrade;
    proxy_set_header    Connection          'upgrade';
    proxy_set_header    Host ssr_server;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_hide_header   X-Powered-By;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto   $scheme;
    proxy_cache_bypass  $http_upgrade;

    # Additional protection headers
    proxy_set_header    X-Forwarded-Host    $server_name;
    proxy_set_header    X-Real-Host         $http_host;

    # Add cache-busting headers
    add_header Pragma   "no-cache"  always;
    add_header Expires  "0"         always;
}

location @redirect {
    limit_req   zone=root_req_limit burst=40 nodelay;
    limit_conn  conn_limit  10;
    limit_req_status        429;
    limit_conn_status       429;

    # Include security headers
    include /etc/nginx/security_headers.conf;

    # Redirect to the root URL
    return 301 /;
}

# SSR location
location / {
    limit_req   zone=general_req_limit burst=50;
    limit_conn conn_limit   10;
    limit_req_status        429;
    limit_conn_status       429;
    include /etc/nginx/security_headers.conf;

    # Proxy to SSR server
    proxy_pass http://ssr_server;
    proxy_http_version 1.1;
    proxy_set_header    Upgrade             $http_upgrade;
    proxy_set_header    Connection          'upgrade';
    proxy_set_header    Host ssr_server;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_hide_header   X-Powered-By;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto   $scheme;
    proxy_cache_bypass  $http_upgrade;

    # Additional protection headers
    proxy_set_header    X-Forwarded-Host    $server_name;
    proxy_set_header    X-Real-Host         $http_host;

    # Add cache-busting headers
    add_header Pragma   "no-cache"  always;
    add_header Expires  "0"         always;
}

# Private session location
location ~* ^/private($|/) {
    limit_req   zone=general_req_limit  burst=50;
    limit_conn conn_limit   10;
    limit_req_status        429;
    limit_conn_status       429;
    include /etc/nginx/security_headers.conf;
    
    # Proxy to SSR server
    proxy_pass http://ssr_server;
    proxy_http_version 1.1;
    proxy_set_header    Upgrade             $http_upgrade;
    proxy_set_header    Connection          'upgrade';
    proxy_set_header    Host ssr_server;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_hide_header   X-Powered-By;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto   $scheme;
    proxy_cache_bypass  $http_upgrade;

    # Additional protection headers
    proxy_set_header    X-Forwarded-Host    $server_name;
    proxy_set_header    X-Real-Host         $http_host;

    # Add cache-busting headers
    add_header Pragma   "no-cache"  always;
    add_header Expires  "0"         always;
}

# API locations
location /create-session {
    limit_req   zone=api_req_limit burst=30;
    limit_req_status    429;
    include /etc/nginx/security_headers.conf;

    # Proxy to Backend WebSocket server
    proxy_pass https://backend_ws; # If your backend is listening on HTTP (not HTTPS), use http:// instead
    proxy_http_version 1.1;
    proxy_set_header    Upgrade             $http_upgrade;
    proxy_set_header    Connection          "upgrade";
    proxy_set_header    Host                backend_ws;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_hide_header   X-Powered-By;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto   $scheme;
    proxy_cache_bypass  $http_upgrade;

    # Additional protection headers
    proxy_set_header    X-Forwarded-Host    $server_name;
    proxy_set_header    X-Real-Host         $http_host;

    # WebSocket-specific settings
    proxy_read_timeout      86400;
    proxy_connect_timeout   60s;
    proxy_send_timeout      60s;
}

# WebSocket location
location ^~ /ws/ { 
    limit_req   zone=api_req_limit burst=30;
    limit_req_status    429;
    include /etc/nginx/security_headers.conf;

    # Proxy to Backend WebSocket server
    proxy_pass https://backend_ws; # If your backend is listening on HTTP (not HTTPS), use http:// instead
    proxy_http_version 1.1;
    proxy_set_header    Upgrade             $http_upgrade;
    proxy_set_header    Connection          "upgrade";
    proxy_set_header    Host                backend_ws;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_hide_header   X-Powered-By;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto   $scheme;
    proxy_cache_bypass  $http_upgrade;

    # Additional protection headers
    proxy_set_header    X-Forwarded-Host    $server_name;
    proxy_set_header    X-Real-Host         $http_host;

    # WebSocket-specific settings
    proxy_read_timeout      86400;
    proxy_connect_timeout   60s;
    proxy_send_timeout      60s;
}

# SSO file handling
# Explicitly serve robots.txt with correct content type
location = /robots.txt {
    limit_req   zone=seo_req_limit burst=20;
    limit_conn  conn_limit  10;
    limit_req_status        429;
    limit_conn_status       429;

    include /etc/nginx/security_headers.conf;
    add_header Content-Type text/plain;
    expires 1d;

    root /usr/share/nginx/html/browser;
    try_files $uri /robots.txt =404;
}

# Explicitly serve sitemap.xml with correct content type
location = /sitemap.xml {
    limit_req   zone=seo_req_limit burst=20;
    limit_conn  conn_limit  10;
    limit_req_status        429;
    limit_conn_status       429;

    include /etc/nginx/security_headers.conf;
    add_header Content-Type application/xml;
    expires 1d;

    root /usr/share/nginx/html/browser;
    try_files $uri /sitemap.xml =404;
}

# Security blocks
# Block access to hidden files and common VCS directories
location ~ /\. {
    limit_req   zone=strict_req_limit burst=10 nodelay;
    limit_req_status    429;

    # Include security headers
    include /etc/nginx/security_headers.conf;

    # Return 404 page
    return  302 /404;
    access_log off;
    log_not_found off;
}

# Block specific version control system directories
location ~ /(\.git|\.hg|\.bzr|\.svn|BitKeeper|_darcs|CVS)/ {
    limit_req   zone=strict_req_limit burst=10 nodelay;
    limit_req_status    429;

    # Include security headers
    include /etc/nginx/security_headers.conf;

    # Return 404 page
    return  302 /404;
    access_log off;
    log_not_found off;
}

# Block additional sensitive patterns
location ~* \.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist|env|DS_Store|aspx)$ {
    limit_req   zone=strict_req_limit burst=10 nodelay;
    limit_req_status    429;

    # Include security headers
    include /etc/nginx/security_headers.conf;

    # Return 404 page
    return 302 /404;
    access_log      off;
    log_not_found   off;
}

# Block PHP files and common exploits with rate limiting
location ~* \.(php|phar|phtml|php\.|php7|php5|php4|php3)$ {
    limit_req   zone=strict_req_limit burst=10 nodelay;
    limit_req_status    429;

    # Return 404
    return 404;
}

# Block phpunit and other common attack paths with rate limiting
location ~* /(vendor|phpunit|eval-stdin|wp-content|wp-includes|wp-admin|cgi-bin|bin\/sh)(/|$) {
    limit_req   zone=strict_req_limit burst=10 nodelay;
    limit_req_status    429;

    # Return 404
    return 404;
}

# Block URL-encoded path traversal attempts with rate limiting
location ~* /(\.%2e|%2\d+e|%\.\.%\.\.%|\.\.|\.%2F|%2F\.\.)(/|$) {
    limit_req   zone=strict_req_limit burst=10 nodelay;
    limit_req_status    429;

    # Return 404
    return 404;
}
