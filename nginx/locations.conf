# Root and main locations
location = / {
    rewrite ^ /@redirect last;
}

location @redirect {
    limit_req zone=root_req_limit burst=2 nodelay;
    limit_conn conn_limit 3;
    limit_req_status 429;
    limit_conn_status 429;
    include /etc/nginx/security_headers.conf;
    return 301 /chat;
}

location / {
    limit_req zone=general_req_limit burst=5 nodelay;
    limit_conn conn_limit 5;
    limit_req_status 429;
    limit_conn_status 429;
    include /etc/nginx/security_headers.conf;
    # Add cache-busting headers
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate" always;
    add_header Pragma "no-cache" always;
    add_header Expires "0" always;
    try_files $uri $uri/ /index.html;
}

# Chat location
location ~* ^/chat($|/) {
    limit_req zone=general_req_limit burst=5 nodelay;
    limit_conn conn_limit 5;
    limit_req_status 429;
    limit_conn_status 429;
    include /etc/nginx/security_headers.conf;
    # Add cache-busting headers
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate" always;
    add_header Pragma "no-cache" always;
    add_header Expires "0" always;
    try_files $uri $uri/ /index.html;
}

# API locations
location /create-session {
    limit_req zone=api_req_limit burst=5 nodelay;
    limit_req_status 429;
    include /etc/nginx/security_headers.conf;
    proxy_pass https://backend_ws; # If your backend is listening on HTTP (not HTTPS), use http:// instead
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Host backend_ws;
    proxy_ssl_verify off; # change to on if you have a trusted certificate
    proxy_set_header X-Real-IP $remote_addr;
    proxy_hide_header X-Powered-By;

    # Additional protection headers
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_set_header X-Real-Host $http_host;

    # WebSocket-specific settings
    proxy_read_timeout 86400;
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

location /ws {
    limit_req zone=api_req_limit burst=10 nodelay;
    limit_req_status 429;
    include /etc/nginx/security_headers.conf;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_pass https://backend_ws/ws; # If your backend is listening on HTTP (not HTTPS), use http:// instead
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Host backend_ws;
    proxy_hide_header X-Powered-By;
    proxy_ssl_verify off; # change to on if you have a trusted certificate

    # Additional protection headers
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_set_header X-Real-Host $http_host;

    # WebSocket-specific settings
    proxy_read_timeout 86400;
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

# Security blocks
# Block access to hidden files and common VCS directories
location ~ /\. {
    include /etc/nginx/security_headers.conf;
    return 302 /404;
    access_log off;
    log_not_found off;
}

# Block specific version control system directories
location ~ /(\.git|\.hg|\.bzr|\.svn|BitKeeper|_darcs|CVS)/ {
    include /etc/nginx/security_headers.conf;
    return 302 /404;
    access_log off;
    log_not_found off;
}

# Block additional sensitive patterns
location ~* \.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist|env|DS_Store)$ {
    include /etc/nginx/security_headers.conf;
    return 302 /404;
    access_log off;
    log_not_found off;
}

# Block PHP files and common exploits with rate limiting
location ~* \.(php|phar|phtml|php\.|php7|php5|php4|php3)$ {
    limit_req zone=strict_req_limit burst=2 nodelay;
    limit_req_status 429;
    return 404;
}

# Block phpunit and other common attack paths with rate limiting
location ~* /(vendor|phpunit|eval-stdin|wp-content|wp-includes|wp-admin|cgi-bin|bin\/sh)(/|$) {
    limit_req zone=strict_req_limit burst=1 nodelay;
    limit_req_status 429;
    return 404;
}

# Block URL-encoded path traversal attempts with rate limiting
location ~* /(\.%2e|%2\d+e|%\.\.%\.\.%|\.\.|\.%2F|%2F\.\.)(/|$) {
    limit_req zone=strict_req_limit burst=1 nodelay;
    limit_req_status 429;
    return 404;
}

location ~ \.aspx$ {
    limit_req zone=general_req_limit burst=5 nodelay;
    limit_conn conn_limit 5;
    limit_req_status 429;
    limit_conn_status 429;
    include /etc/nginx/security_headers.conf;
    return 301 https://${SERVER_NAME}/chat;
}

# Static file handling
# Explicitly serve robots.txt with correct content type
location = /robots.txt {
    include /etc/nginx/security_headers.conf;
    add_header Content-Type text/plain;
    expires 1d;
    try_files $uri /robots.txt =404;
}

# Explicitly serve sitemap.xml with correct content type
location = /sitemap.xml {
    include /etc/nginx/security_headers.conf;
    add_header Content-Type application/xml;
    expires 1d;
    try_files $uri /sitemap.xml =404;
}

# HTML and JSON files
location ~* \.html$ {
    include /etc/nginx/security_headers.conf;
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate" always;
    add_header Pragma "no-cache" always;
    add_header Expires "0" always;
}

# JSON files
location ~* \.json$ {
    include /etc/nginx/security_headers.conf;
    add_header Cache-Control "public, max-age=86400" always;
}

# Static assets
location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
    include /etc/nginx/security_headers.conf;
    add_header Cache-Control "public, max-age=31536000" always;
}

# Specific location for index.html to ensure it's never cached
location = /index.html {
    include /etc/nginx/security_headers.conf;
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate" always;
    add_header Pragma "no-cache" always;
    add_header Expires "0" always;
}
