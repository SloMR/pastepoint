server_tokens off;

# Gzip
gzip on;
gzip_types text/plain text/css application/json application/javascript application/xml+rss application/xml image/svg+xml;

# SSL
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE:HIGH:!aNULL:!MD5:!3DES';
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;

# Upstream to your Actix server (Docker service on port 9000)
upstream backend_ws {
    server server:9000;
}

server {
    listen 443 ssl;
    http2 on;
    server_name ${SERVER_NAME};

    ssl_certificate ${SSL_CERT_PATH};
    ssl_certificate_key ${SSL_CERT_KEY_PATH};

    root /usr/share/nginx/html/browser;
    index index.html;
    include /etc/nginx/security-headers.conf;

    # Block metadata access with direct conditions
    if ($request_uri ~* "/(metadata|computeMetadata|latest/meta-data|169\.254\.169\.254)") {
        return 444;
    }

    if ($http_host = "169.254.169.254") {
        return 444;
    }

    # Additional metadata hosts to block
    if ($http_host ~* "(metadata\.google\.internal|metadata\.azure\.internal|instance-data)") {
        return 444;
    }

    location = / {
        include /etc/nginx/security-headers.conf;
        return 302 /chat;
    }

    location / {
        include /etc/nginx/security-headers.conf;
        try_files $uri $uri/ /index.html;
    }

    location ~* ^/chat($|/) {
        include /etc/nginx/security-headers.conf;
        try_files $uri $uri/ /index.html;
    }

    location /create-session {
        include /etc/nginx/security-headers.conf;
        proxy_pass https://backend_ws; # If your backend is listening on HTTP (not HTTPS), use http:// instead
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host backend_ws;
        proxy_ssl_verify off; # change to on if you have a trusted certificate
        proxy_set_header X-Real-IP $remote_addr;
        proxy_hide_header X-Powered-By;

        # Additional protection headers
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-Host $http_host;

        # WebSocket-specific settings
        proxy_read_timeout 86400;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /ws {
        include /etc/nginx/security-headers.conf;
        proxy_set_header X-Real-IP $remote_addr; # If your backend is listening on HTTP (not HTTPS), use http:// instead
        proxy_pass https://backend_ws/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host backend_ws;
        proxy_hide_header X-Powered-By;
        proxy_ssl_verify off; # change to on if you have a trusted certificate

        # Additional protection headers
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-Host $http_host;

        # WebSocket-specific settings
        proxy_read_timeout 86400;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Block access to hidden files and common VCS directories
    location ~ /\. {
        include /etc/nginx/security-headers.conf;
        return 302 /404;
        access_log off;
        log_not_found off;
    }

    # Block specific version control system directories
    location ~ /(\.git|\.hg|\.bzr|\.svn|BitKeeper|_darcs|CVS)/ {
        include /etc/nginx/security-headers.conf;
        return 302 /404;
        access_log off;
        log_not_found off;
    }

    # Block additional sensitive patterns
    location ~* \.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist|env|DS_Store)$ {
        include /etc/nginx/security-headers.conf;
        return 302 /404;
        access_log off;
        log_not_found off;
    }

    # Explicitly serve robots.txt with correct content type
    location = /robots.txt {
        include /etc/nginx/security-headers.conf;
        add_header Content-Type text/plain;
        expires 1d;
        try_files $uri /robots.txt =404;
    }

    # Explicitly serve sitemap.xml with correct content type
    location = /sitemap.xml {
        include /etc/nginx/security-headers.conf;
        add_header Content-Type application/xml;
        expires 1d;
        try_files $uri /sitemap.xml =404;
    }

    location ~* \.(html|json)$ {
        include /etc/nginx/security-headers.conf;
        add_header Cache-Control "public, max-age=86400" always;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        include /etc/nginx/security-headers.conf;
        add_header Cache-Control "public, max-age=31536000" always;
    }
}

server {
    listen 80;
    server_name ${SERVER_NAME};

    # Health check endpoint
    location /health {
        return 200 'OK';
        add_header Content-Type text/plain;
    }

    # Redirect everything else to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}
