server_tokens off;

# Gzip
gzip on;
gzip_types text/plain text/css application/json application/javascript application/xml+rss application/xml image/svg+xml;

# SSL
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE:HIGH:!aNULL:!MD5:!3DES';
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;

# Upstream to your Actix server (Docker service on port 9000)
upstream backend_ws {
    server server:9000;
}

server {
    listen 443 ssl http2;
    server_name 127.0.0.1;

    ssl_certificate /etc/ssl/certs/cert.pem;
    ssl_certificate_key /etc/ssl/certs/key.pem;

    root /usr/share/nginx/html/browser;
    index index.html;
    include /etc/nginx/security-headers.conf;

    location = / {
        return 302 /chat;
    }

    location / {
        include /etc/nginx/security-headers.conf;
        try_files $uri $uri/ /index.html;
    }

    location ~* ^/chat($|/) {
        include /etc/nginx/security-headers.conf;
        try_files $uri $uri/ /index.html;
    }

    location /create-session {
        include /etc/nginx/security-headers.conf;
        proxy_pass https://backend_ws;
        # If your backend is listening on HTTP (not HTTPS), use http:// instead
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_ssl_verify off; # change to on if you have a trusted certificate
    }

    location /ws {
        include /etc/nginx/security-headers.conf;
        # If your backend is listening on HTTP (not HTTPS), use http:// instead
        proxy_pass https://backend_ws/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_ssl_verify off; # change to on if you have a trusted certificate
    }
server {
    listen 80;
    server_name 127.0.0.1;
    return 301 https://$host$request_uri;
}
